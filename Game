
# Conway's Game of Life
#


from 2DList import * 
from gol_graphics import *
import random

def count_neighbors(cellr,cellc,grid): #(2,2,grid1)
    ''' returns the number of alive neighbors of the cell at position [cellr][cellc] in the specified grid.
    '''
    count=0 

    for r in range(cellr-1,cellr+2):  #range(1,4) = 1,2,3
        for c in range(cellc-1,cellc+2): #range(1,4)  =1,2,3
            if grid[r][c] == 1:
                count += 1
    if grid[cellr][cellc] == 1:
        count -= 1
    return count 


    
def next_gen(grid):
    ''' takes a 2-D list called grid that represents the current generation of cells, and that uses the rules of the Game of Life (see above) to create and return a new 2-D list representing the next generation of cells.
    '''
    
    new_grid = copy(grid) #5*5 grid 
    height = len(grid) #5
    width = len(grid[0]) #5
    #inner_cell = inner_grid(height, width) #3*3 grid 
    
    
    for r in range(1,height-1): # 1,2,3
        for c in range(1,width-1):  # 1,2,3
            neighbor_count = count_neighbors(r,c,grid) # count neighbors of each cell in the inner cell 
            if neighbor_count < 2 or neighbor_count > 3:
                new_grid[r][c] = 0 #change new_grid 
            if neighbor_count == 3 and grid[r][c] == 0:
                new_grid[r][c] = 1 
              
    return new_grid   
    
